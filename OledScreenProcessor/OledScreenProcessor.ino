/* Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/7239c0dc-bf5e-463b-8b6f-ccef187446c9 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float angleA;
  int MAX;
  int MIN;
  int ROM;
  int volume;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/


// including all the libaries needed for the code
#include "pitches.h"
#include "thingProperties.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SPI.h>
#include <Wire.h>

//setting up the screen
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire);

//defining all the needed constants
int r = 0.5;
int r2 = 1;
int r3 = 3;
int r4 = 5;
int r5 = 0;
int r6 = 1;
int r7 = 57; 
/*
these are all 'reset' values which will be constantly changed in the code to allow for reading
to be taken at designated time steps
*/
int Ang1 = 3000; 
int Ang2 = 3000;
int Ang3 = 3000;
/*
these 3 are set to 300 to insure that on start up they wont cause the screen to displace that
the user needs to move their leg
*/
int still ;
int angle1;
int angle2;
int FangleINT;

/*
bellow is a converted bitmap of a 'logo' which is just a man running up a hill this is here 
to allow the photo to be displayed on the start up of the arduino
*/
  const unsigned char Logo [1024] PROGMEM = {
// 'Athlete-runner-man-running-healthy-knee-Yorkshire-Knee-Clinic-900px', 128x64px
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9e, 0x00, 0x1f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x00, 0x3f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0x00, 0x7f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0x00, 0x7f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x1e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x1e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x30, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x20, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xa0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x1f, 0xfc, 0x7c, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x07, 0x9f, 0xff, 0xfe, 0x1f, 0xfe, 0x18, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x1f, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x1f, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x3f, 0xff, 0xfc, 0x00, 0x03, 0xc3, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x7f, 0xff, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x9f, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x7f, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x21, 0x8f, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x7f, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7f, 0xf0, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xff, 0xff, 0xe0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {

  //show logo
  display.clearDisplay();
  display.drawBitmap(0, 0, Logo, 128, 64, WHITE); 
  display.display();
  
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  
  // Defined in thingProperties.h
  initProperties();
  

  
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  //this displayes the above mentioned logo

}

void loop() {
  //all the T1-8 values print when the time stamp is met this helps to show if there is any delay in the code
  Serial.println("T0"); 
  
   ArduinoCloud.update();
  // grabs value from the cloud

  Serial.println("T1");    
  Serial.println(angleA);  
  
  /*
  this creates a float called check which acts as the current time
  and the rest of the code uses this to check when to do things
  */
  float CHECK = millis()/1000;

  
  if(CHECK <= 5){
  MIN =180;
  }
  
//checks if the angle is a angle we want and marks it as angle1
  if(angleA >= 0 && angleA <= 180 && CHECK >= r5){
    angle1 = round(angleA);
        r5 = r5 + 2;
    

  }
  
  //this does the same as above but at 3 seconds later
  if(angleA >= 0 && angleA <= 180 && CHECK >= r6){
    angle2 = round(angleA);
        r6 = r6 + 2;

  }

  float c1 = angle1 - 10;
  float c2 = angle1 + 10;
  
//the following filters out any spikes in the data
 if(angle2 >= c1 && angle2 <= c2){
   FangleINT = angle2;
   
     Serial.print("FangleINT:");  
     Serial.println(FangleINT); 
  }
  

  /* the two if statements bellow check for new max/min values
  and will asign them if they are
  */
  if ( FangleINT > MAX ){
  MAX = FangleINT;
  }

  if ( FangleINT < MIN ){
  MIN = FangleINT;
  }
  Serial.println("T2"); 
  /*
  from line 218 to 233 just check if the knee has 
  stayed still for a set period
  */
  if (CHECK >= r7){
    if (CHECK >= r2){
      Ang1 = FangleINT;
      r2 = r2 + 5;
    }

    if (CHECK >= r3){
      Ang2 = FangleINT;
      r3 = r3 + 5;
    }

    if (CHECK >= r4){
      Ang3 = FangleINT;
      r4 = r4 + 5;
    }

    still = (Ang1+Ang2+Ang3) / 3;

    r7 = r7 + 120;
     
  }
   ROM = MAX - MIN;
  Serial.println("T3"); 
  
    //updates the screen if condition is met
    if (CHECK >= r){
    Serial.println("T4"); 
    if (still >= (FangleINT - 5) && still <= (FangleINT + 5)){
    
/*
the following just flashes text and playes a buzzing sound if the knee
has not moved for a set time
*/
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(WHITE);
    Serial.println("T4.1");       
    display.setCursor(0,0);   
    display.print("Remember  to stretch  your leg");      
    display.display();
    Ang1 = FangleINT;
    Serial.println("T4.2");  
    analogWrite(3, volume);
    delay(340);
    analogWrite(3, 0);
    delay(340);
    analogWrite(3, volume);
    delay(340);
    analogWrite(3, 0);
    Serial.println("T4.3");  
    Ang2 = FangleINT;
    delay(2000);
    Ang3 = FangleINT;
    Serial.println("T4.4");       
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.print("angle: ");
    display.setCursor(74, 0);
    display.print(FangleINT);
    display.setTextSize(1);
    display.cp437(true);
    display.write(167);
    Serial.println("T4.5");   
    display.setTextSize(2);
    display.setCursor(0,22);
    display.print("max: ");
    display.setCursor(54, 22);
    display.print(MAX);
    display.setTextSize(1);
    display.cp437(true);
    display.write(167);
    Serial.println("T4.6");   
    display.setTextSize(2);
    display.setCursor(0,44);
    display.print("RoM: ");
    display.setCursor(54, 44);
    display.print(ROM);
    display.setTextSize(1);
    display.cp437(true);
    display.write(167);
    display.display();
    Serial.println("T4.7");   
    MIN = 180;
    MAX = 0;
     
    r = r + 0.5;
   Serial.println("T5");      
    }
  
   
  else {
    /*
    if the knee has been moved recently then it will just display
    the current angle, the max angle and the min angle.
    */
    //Serial.println("T5"); 
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.print("angle: ");
    display.setCursor(74, 0);
    display.print(FangleINT);
    display.setTextSize(1);
    display.cp437(true);
    display.write(167);

    display.setTextSize(2);
    display.setCursor(0,22);
    display.print("max: ");
    display.setCursor(54, 22);
    display.print(MAX);
    display.setTextSize(1);
    display.cp437(true);
    display.write(167);

    display.setTextSize(2);
    display.setCursor(0,44);
    display.print("RoM: ");
    display.setCursor(54, 44);
    display.print(ROM);
    display.setTextSize(1);
    display.cp437(true);
    display.write(167);
    display.display();
  
    r = r + 0.5;

  }
      
  }

    Serial.println(FangleINT); 
     Serial.println("T6");  
}



/*
  Since Angle is READ_WRITE variable, onAngleChange() is
  executed every time a new value is received from IoT Cloud.
*/

/*
  Since FangleINT is READ_WRITE variable, onFangleINTChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFangleINTChange()  {
  // Add your code here to act upon FangleINT change
}






/*
  Since FangleA is READ_WRITE variable, onFangleAChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFangleAChange()  {
  // Add your code here to act upon FangleA change
}

/*
  Since AngleA is READ_WRITE variable, onAngleAChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAngleAChange()  {
  // Add your code here to act upon AngleA change
}




/*
  Since MAX is READ_WRITE variable, onMAXChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMAXChange()  {
  // Add your code here to act upon MAX change
}
/*
  Since MIN is READ_WRITE variable, onMINChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMINChange()  {
  // Add your code here to act upon MIN change
}
/*
  Since ROM is READ_WRITE variable, onROMChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onROMChange()  {
  // Add your code here to act upon ROM change
}

/*
  Since Volume is READ_WRITE variable, onVolumeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onVolumeChange()  {
  // Add your code here to act upon Volume change
}
